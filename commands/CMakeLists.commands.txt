find_program(CTEST_EXECUTABLE ctest)
if(NOT CTEST_EXECUTABLE)
    message(FATAL_ERROR "ctest not found!")
endif()



add_custom_target(build
  COMMAND ${CMAKE_MAKE_PROGRAM} -j8
)

add_custom_target(run
    COMMAND ${CMAKE_BINARY_DIR}/CloverDemo
    DEPENDS build CloverDemo
    WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
    USES_TERMINAL
)

find_program(
  CLANG_FORMAT_BIN clang-format
)
if(CLANG_FORMAT_BIN)
  file(GLOB_RECURSE FORMAT_SOURCE_LIST
    src/*.cpp src/*.h
    includes/*.cpp includes/*.h
    test/*.cc
  )

  # Create custom target
  add_custom_target(
    fmt
    COMMAND ${CLANG_FORMAT_BIN}
    -i
    -style=file
    ${FORMAT_SOURCE_LIST}
    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
  )
else()
    add_custom_target(
        fmt
        COMMAND ${CMAKE_COMMAND} -E echo "clang-format binary not found."
    )
endif()

find_program(CLOC_BIN cloc)
if(CLOC_BIN)
    add_custom_target(cloc
        COMMAND cloc . --fullpath --exclude-dir=dependencies,build,.vscode,docs,ADR
        WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
    )
else()
    add_custom_target(cloc
        COMMAND ${CMAKE_COMMAND} -E echo "cloc binary not found."
    )
endif()

find_program(PPROF_BIN pprof)
if(PPROF_BIN)
  add_custom_target(profile_call_graph
    DEPENDS build
    COMMAND env CPUPROFILE_FREQUENCY=48000 CPUPROFILE=./test.prof ${CMAKE_BINARY_DIR}/Clover_Demo_Profiling   
    COMMAND env ${PPROF_BIN} -web -cum ./build/Clover_Demo_Profiling ./test.prof
    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
  )
else()
  add_custom_target(profile_call_graph
    COMMAND ${CMAKE_COMMAND} -E echo "pprof not found."
  )
endif()


find_program(CLANG_TIDY_BIN clang-tidy)

file(GLOB_RECURSE TIDY_SOURCE_LIST
    CONFIGURE_DEPENDS
    ${CMAKE_SOURCE_DIR}/includes/*.[h;cpp]
    ${CMAKE_SOURCE_DIR}/test/*.cc
)

if(CLANG_TIDY_BIN)
    add_custom_target(tidy
        WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
        COMMAND ${CLANG_TIDY_BIN}
        -p ${CMAKE_BINARY_DIR}
        -extra-arg=-std=c++20
        -extra-arg=-I/usr/include/c++/13.2.1/
        -extra-arg=-I/usr/lib/clang/15.0.7/include
        -extra-arg=-I/usr/local/include
        -extra-arg=-I/usr/include
        ${TIDY_SOURCE_LIST}
    )
else()
    add_custom_target(tidy
        COMMAND echo "clang-tidy binary not found."
    )
endif()